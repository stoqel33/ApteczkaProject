{"version":3,"sources":["context.js","Theme/GlobalStyle.js","Styled/Link.js","Components/List/Item/Item.js","Components/List/List.js","Views/Medicine/Medicine.js","Components/Form/Label/Input/Inputs.js","Components/Form/Label/Label.js","Components/Form/Form.js","Views/AddMedicine/AddMedicine.js","Components/Form/FormEdit.js","Views/EditMedicine/EditMedicine.js","Views/Root/Root.js","index.js"],"names":["AppContext","React","createContext","appHeight","document","documentElement","style","setProperty","window","innerHeight","addEventListener","GlobalStyle","createGlobalStyle","styled","Link","Wrapper","div","Title","span","TitleName","Value","Item","id","name","amount","date","remind","handle","to","onClick","e","parseInt","target","List","medicines","map","medicine","key","h1","Empty","ButtonAddNew","button","Medicine","Consumer","context","length","Input","input","InputAmount","Inputs","type","checked","placeholder","autoComplete","value","onChange","min","defaultProps","MedicineLabel","label","h2","Label","children","htmlFor","FormAdd","form","WrapperMedicine","ButtonAdd","Form","state","nameMedicine","amountMedicine","dateMedicine","Date","toISOString","slice","remindMedicine","handleInputChange","setState","replace","handleClickSubmit","nameMed","charAt","toUpperCase","props","addMedicine","this","Component","AddMedicine","FormEdit","trim","medicineName","changeMedicine","EditMedicine","Root","prevState","oldMedicines","handleClickGetId","contextElements","Provider","exact","path","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3804bb94.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AppContext = React.createContext();\r\n\r\nexport default AppContext;\r\n","import { createGlobalStyle } from 'styled-components/macro';\r\n\r\nconst appHeight = () =>\r\n  document.documentElement.style.setProperty('--app-height', `${window.innerHeight}px`);\r\nwindow.addEventListener('resize', appHeight);\r\nappHeight();\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n  *{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  html{\r\n    font-size: 62.5%;\r\n  }\r\n\r\n  body{\r\n    font-size: 1.6rem;\r\n    font-family: 'Montserrat', sans-serif;\r\n    background: linear-gradient(135deg, rgba(97,13,103,1) 10%, rgba(167,98,98,1) 100%);\r\n    min-height: var(--app-height);\r\n\r\n    @media screen and (min-width: 800px) {\r\n        max-width: 800px;\r\n        margin: 0 auto;\r\n      }\r\n    }\r\n\r\n  textarea:focus,\r\n  input:focus,\r\n  button:focus {\r\n    outline: none;\r\n  }\r\n\r\n  input[type='number']::-webkit-outer-spin-button,\r\n  input[type='number']::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n  }\r\n\r\n  input[type='number'] {\r\n    -moz-appearance: textfield;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import { Link } from 'react-router-dom';\r\nimport styled from 'styled-components/macro';\r\n\r\nexport default styled(Link)`\r\n  text-decoration: none;\r\n  color: inherit;\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport PropTypes from 'prop-types';\r\nimport Link from 'Styled/Link';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px 40px;\r\n  margin-bottom: 20px;\r\n  background-color: rgba(245, 245, 245, 0.3);\r\n  border-radius: 10%;\r\n\r\n  &:last-child {\r\n    margin-bottom: 30px;\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  font-size: 18px;\r\n  margin-bottom: 7px;\r\n\r\n  &:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n`;\r\n\r\nconst TitleName = styled(Title)`\r\n  font-size: 25px;\r\n`;\r\n\r\nconst Value = styled.span`\r\n  margin-left: 8px;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst Item = ({ id, name, amount, date, remind, handle }) => {\r\n  // Wyłapanie id leku i przekazanie który lek ma być edytowany\r\n  const handled = (e) => handle(parseInt(e.target.id, 10));\r\n\r\n  return (\r\n    <Wrapper>\r\n      <TitleName>\r\n        Lek <Value>{name}</Value>\r\n      </TitleName>\r\n      <Title>\r\n        Ilość <Value>{amount}</Value>\r\n      </Title>\r\n      <Title>\r\n        Data ważności <Value>{date}</Value>\r\n      </Title>\r\n      {remind ? (\r\n        <Title>\r\n          Przypomnienie\r\n          <Value>TAK</Value>\r\n        </Title>\r\n      ) : (\r\n        <Title>\r\n          Przypomnienie\r\n          <Value>NIE</Value>\r\n        </Title>\r\n      )}\r\n      <Link to=\"/ApteczkaProject/editMedicine\" onClick={handled}>\r\n        <span id={id}>edytuj</span>\r\n      </Link>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nItem.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  amount: PropTypes.string.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n  remind: PropTypes.bool.isRequired,\r\n  handle: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Item;\r\n","import React from 'react';\r\nimport Item from 'Components/List/Item/Item';\r\nimport styled from 'styled-components/macro';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding-top: 50px;\r\n`;\r\n\r\nconst List = ({ medicines, handle }) => {\r\n  return (\r\n    <Wrapper>\r\n      {medicines.map((medicine) => (\r\n        <Item\r\n          key={medicine.id}\r\n          id={medicine.id}\r\n          name={medicine.name}\r\n          amount={medicine.amount}\r\n          date={medicine.date}\r\n          remind={medicine.remind}\r\n          handle={handle}\r\n        />\r\n      ))}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nList.propTypes = {\r\n  medicines: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number,\r\n      name: PropTypes.string,\r\n      amount: PropTypes.string,\r\n      date: PropTypes.string,\r\n      remind: PropTypes.bool,\r\n    }),\r\n  ).isRequired,\r\n  handle: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default List;\r\n","import React from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport AppContext from 'context';\r\nimport List from 'Components/List/List';\r\nimport Link from 'Styled/Link';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh;\r\n  text-align: center;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin-top: 20px;\r\n  color: white;\r\n`;\r\n\r\nconst Empty = styled.h1`\r\n  margin: 50px 20px;\r\n  padding: 100px 40px;\r\n  background-color: rgba(245, 245, 245, 0.3);\r\n  border-radius: 10%;\r\n  color: black;\r\n`;\r\n\r\nconst ButtonAddNew = styled.button`\r\n  width: 100%;\r\n  margin-bottom: 20px;\r\n  font-size: 35px;\r\n  color: white;\r\n  background-color: transparent;\r\n  border: none;\r\n`;\r\n\r\nconst Medicine = () => (\r\n  <AppContext.Consumer>\r\n    {(context) => (\r\n      <Wrapper>\r\n        <Title>Apteczka</Title>\r\n        {context.medicines.length > 0 ? (\r\n          <List medicines={context.medicines} handle={context.handle} />\r\n        ) : (\r\n          <Empty>Brak leków</Empty>\r\n        )}\r\n        <ButtonAddNew>\r\n          <Link to=\"/ApteczkaProject/addMedicine\">Dodaj nowy lek</Link>\r\n        </ButtonAddNew>\r\n      </Wrapper>\r\n    )}\r\n  </AppContext.Consumer>\r\n);\r\n\r\nexport default Medicine;\r\n","import React from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport Proptypes from 'prop-types';\r\n\r\nconst Input = styled.input`\r\n  color: white;\r\n  padding: 10px 0 10px 15px;\r\n  margin-right: 10px;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-left: 1px solid black;\r\n  border-bottom: 1px solid black;\r\n  ::placeholder {\r\n    font-size: 300;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst InputAmount = styled(Input)`\r\n  width: 50px;\r\n`;\r\n\r\nconst Inputs = ({\r\n  type,\r\n  id,\r\n  checked,\r\n  placeholder,\r\n  autoComplete,\r\n  value,\r\n  onChange,\r\n  min,\r\n}) => {\r\n  return (\r\n    <>\r\n      {(type === 'text' && (\r\n        <Input\r\n          type={type}\r\n          id={id}\r\n          placeholder={placeholder}\r\n          autoComplete={autoComplete}\r\n          value={value}\r\n          onChange={onChange}\r\n        />\r\n      )) ||\r\n        (type === 'tel' && (\r\n          <InputAmount\r\n            type={type}\r\n            id={id}\r\n            placeholder={placeholder}\r\n            autoComplete={autoComplete}\r\n            value={value}\r\n            onChange={onChange}\r\n            min={min}\r\n          />\r\n        )) ||\r\n        (type === 'date' && (\r\n          <Input\r\n            type={type}\r\n            id={id}\r\n            placeholder={placeholder}\r\n            autoComplete={autoComplete}\r\n            value={value}\r\n            onChange={onChange}\r\n          />\r\n        )) ||\r\n        (type === 'checkbox' && (\r\n          <Input type={type} id={id} checked={checked} onChange={onChange} />\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n\r\nInputs.propTypes = {\r\n  type: Proptypes.string.isRequired,\r\n  id: Proptypes.string.isRequired,\r\n  checked: Proptypes.bool,\r\n  placeholder: Proptypes.string,\r\n  autoComplete: Proptypes.string,\r\n  value: Proptypes.string,\r\n  onChange: Proptypes.func.isRequired,\r\n  min: Proptypes.string,\r\n};\r\n\r\nInputs.defaultProps = {\r\n  checked: false,\r\n  placeholder: '',\r\n  autoComplete: 'on',\r\n  value: '',\r\n  min: '',\r\n};\r\n\r\nexport default Inputs;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components/macro';\r\nimport Inputs from 'Components/Form/Label/Input/Inputs';\r\n\r\nconst MedicineLabel = styled.label`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  @media screen and (min-width: 800px) {\r\n    .medicineLabel {\r\n      margin: 0 80px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  font-size: 20px;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst Label = ({\r\n  name,\r\n  type,\r\n  placeholder,\r\n  value,\r\n  onChange,\r\n  children,\r\n  checked,\r\n  autoComplete,\r\n}) => {\r\n  return (\r\n    <MedicineLabel htmlFor={name}>\r\n      <Title>{children}</Title>\r\n      <Inputs\r\n        type={type}\r\n        id={name}\r\n        checked={checked}\r\n        placeholder={placeholder}\r\n        autoComplete={autoComplete}\r\n        value={value}\r\n        onChange={onChange}\r\n        min=\"1\"\r\n      />\r\n    </MedicineLabel>\r\n  );\r\n};\r\n\r\nLabel.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n  children: PropTypes.string.isRequired,\r\n  checked: PropTypes.bool,\r\n  autoComplete: PropTypes.string,\r\n};\r\n\r\nLabel.defaultProps = {\r\n  placeholder: '',\r\n  value: '',\r\n  checked: false,\r\n  autoComplete: 'on',\r\n};\r\n\r\nexport default Label;\r\n","import React from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport Link from 'Styled/Link';\r\nimport Label from './Label/Label';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 20px 0;\r\n  color: white;\r\n`;\r\n\r\nconst FormAdd = styled.form`\r\n  width: 100%;\r\n`;\r\n\r\nconst WrapperMedicine = styled.div`\r\n  padding: 20px 5px;\r\n  margin: 30px 0;\r\n  background: rgba(245, 245, 245, 0.3);\r\n`;\r\n\r\nconst ButtonAdd = styled.button`\r\n  width: 250px;\r\n  height: 50px;\r\n  margin-top: 20px;\r\n  letter-spacing: 2px;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  color: #a55f62;\r\n  border: 2px solid black;\r\n  background-color: black;\r\n  list-style: none;\r\n  text-decoration: none;\r\n  line-height: 45px;\r\n  text-align: center;\r\n`;\r\n\r\nclass Form extends React.Component {\r\n  state = {\r\n    nameMedicine: '',\r\n    amountMedicine: '',\r\n    dateMedicine: new Date().toISOString().slice(0, 10),\r\n    remindMedicine: false,\r\n  };\r\n\r\n  // Walidacja inputów\r\n  handleInputChange = (e) => {\r\n    if (e.target.type === 'checkbox') {\r\n      this.setState({\r\n        [e.target.id]: e.target.checked,\r\n      });\r\n    } else if (e.target.type === 'tel') {\r\n      e.target.value = e.target.value.replace(/[^0-9]+/, '');\r\n      if (e.target.value === '0') e.target.value = '0';\r\n      else {\r\n        this.setState({\r\n          [e.target.id]: e.target.value,\r\n        });\r\n      }\r\n    } else if (e.target.type === 'text') {\r\n      e.target.value = e.target.value.replace(/[^a-zA-Z]+/, '');\r\n      this.setState({\r\n        [e.target.id]: e.target.value,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        [e.target.id]: e.target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Obsługa dodania leku\r\n  handleClickSubmit = () => {\r\n    const { nameMedicine, amountMedicine, dateMedicine, remindMedicine } = this.state;\r\n    const nameMed = nameMedicine.charAt(0).toUpperCase() + nameMedicine.slice(1);\r\n    this.props.addMedicine(nameMed, amountMedicine, dateMedicine, remindMedicine);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Title>Dodaj Lek</Title>\r\n        <FormAdd>\r\n          <WrapperMedicine>\r\n            <Label\r\n              name=\"nameMedicine\"\r\n              type=\"text\"\r\n              autoComplete=\"off\"\r\n              value={this.state.nameMedicine}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Nazwa\"\r\n            >\r\n              Nazwa leku\r\n            </Label>\r\n          </WrapperMedicine>\r\n\r\n          <WrapperMedicine>\r\n            <Label\r\n              name=\"amountMedicine\"\r\n              type=\"tel\"\r\n              placeholder=\"0\"\r\n              autoComplete=\"off\"\r\n              value={this.state.amountMedicine}\r\n              onChange={this.handleInputChange}\r\n            >\r\n              Ilość Tabletek\r\n            </Label>\r\n          </WrapperMedicine>\r\n\r\n          <WrapperMedicine>\r\n            <Label\r\n              name=\"dateMedicine\"\r\n              type=\"date\"\r\n              value={this.state.dateMedicine}\r\n              onChange={this.handleInputChange}\r\n            >\r\n              Data ważności\r\n            </Label>\r\n          </WrapperMedicine>\r\n\r\n          <WrapperMedicine>\r\n            <Label\r\n              name=\"remindMedicine\"\r\n              type=\"checkbox\"\r\n              checked={this.state.remindMedicine}\r\n              onChange={this.handleInputChange}\r\n            >\r\n              Przypomnienia\r\n            </Label>\r\n          </WrapperMedicine>\r\n        </FormAdd>\r\n\r\n        {this.state.nameMedicine.length > 2 && this.state.amountMedicine.length > 0 ? (\r\n          <Link to=\"/ApteczkaProject/\" onClick={this.handleClickSubmit}>\r\n            <ButtonAdd>DODAJ</ButtonAdd>\r\n          </Link>\r\n        ) : (\r\n          <Link to=\"/ApteczkaProject/AddMedicine\">\r\n            <ButtonAdd>DODAJ</ButtonAdd>\r\n          </Link>\r\n        )}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport AppContext from 'context';\r\nimport Form from 'Components/Form/Form';\r\n\r\nconst AddMedicine = () => (\r\n  <AppContext.Consumer>\r\n    {(context) => <Form addMedicine={context.addMedicine} handle={context.handle} />}\r\n  </AppContext.Consumer>\r\n);\r\n\r\nexport default AddMedicine;\r\n","import React from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport Link from 'Styled/Link';\r\nimport Label from './Label/Label';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 20px 0;\r\n  color: white;\r\n`;\r\n\r\nconst FormAdd = styled.form`\r\n  width: 100%;\r\n`;\r\n\r\nconst WrapperMedicine = styled.div`\r\n  padding: 20px 5px;\r\n  margin: 30px 0;\r\n  background: rgba(245, 245, 245, 0.3);\r\n`;\r\n\r\nconst ButtonAdd = styled.button`\r\n  width: 250px;\r\n  height: 50px;\r\n  margin-top: 20px;\r\n  letter-spacing: 2px;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  color: #a55f62;\r\n  border: 2px solid black;\r\n  background-color: black;\r\n  list-style: none;\r\n  text-decoration: none;\r\n  line-height: 45px;\r\n  text-align: center;\r\n`;\r\n\r\nclass FormEdit extends React.Component {\r\n  state = {\r\n    nameMedicine: this.props.medicines[this.props.target].name,\r\n    amountMedicine: this.props.medicines[this.props.target].amount,\r\n    dateMedicine: this.props.medicines[this.props.target].date,\r\n    remindMedicine: this.props.medicines[this.props.target].remind,\r\n  };\r\n\r\n  // Walidacja inputów\r\n  handleInputChange = (e) => {\r\n    if (e.target.type === 'checkbox') {\r\n      this.setState({\r\n        [e.target.id]: e.target.checked,\r\n      });\r\n    } else if (e.target.type === 'tel') {\r\n      e.target.value = e.target.value.replace(/[^0-9]+/, '');\r\n      if (e.target.value === '0') {\r\n        e.target.value = '0';\r\n      } else {\r\n        this.setState({\r\n          [e.target.id]: e.target.value,\r\n        });\r\n      }\r\n    } else if (e.target.type === 'text') {\r\n      e.target.value = e.target.value.replace(/[^a-zA-Z]+/, '');\r\n      this.setState({\r\n        [e.target.id]: e.target.value,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        [e.target.id]: e.target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Obsługa dodania leku\r\n  handleClickSubmit = () => {\r\n    const { nameMedicine, amountMedicine, dateMedicine, remindMedicine } = this.state;\r\n    const nameMed = nameMedicine.trim();\r\n    const medicineName = nameMed.charAt(0).toUpperCase() + nameMed.slice(1).trim();\r\n    this.props.changeMedicine(medicineName, amountMedicine, dateMedicine, remindMedicine);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Title>Edytuj Lek</Title>\r\n        <FormAdd>\r\n          <>\r\n            <WrapperMedicine>\r\n              <Label\r\n                name=\"nameMedicine\"\r\n                type=\"text\"\r\n                autoComplete=\"off\"\r\n                value={this.state.nameMedicine}\r\n                onChange={this.handleInputChange}\r\n                placeholder=\"Nazwa\"\r\n              >\r\n                Nazwa leku\r\n              </Label>\r\n            </WrapperMedicine>\r\n            <WrapperMedicine>\r\n              <Label\r\n                name=\"amountMedicine\"\r\n                type=\"tel\"\r\n                placeholder=\"0\"\r\n                autoComplete=\"off\"\r\n                value={this.state.amountMedicine}\r\n                onChange={this.handleInputChange}\r\n              >\r\n                Ilość Tabletek\r\n              </Label>\r\n            </WrapperMedicine>\r\n\r\n            <WrapperMedicine>\r\n              <Label\r\n                name=\"dateMedicine\"\r\n                type=\"date\"\r\n                value={this.state.dateMedicine}\r\n                onChange={this.handleInputChange}\r\n              >\r\n                Data ważności\r\n              </Label>\r\n            </WrapperMedicine>\r\n\r\n            <WrapperMedicine>\r\n              <Label\r\n                name=\"remindMedicine\"\r\n                type=\"checkbox\"\r\n                checked={this.state.remindMedicine}\r\n                onChange={this.handleInputChange}\r\n              >\r\n                Przypomnienia\r\n              </Label>\r\n            </WrapperMedicine>\r\n          </>\r\n        </FormAdd>\r\n        {this.state.nameMedicine.length > 2 && this.state.amountMedicine.length > 0 ? (\r\n          <Link to=\"/ApteczkaProject/\" onClick={this.handleClickSubmit}>\r\n            <ButtonAdd>Zapisz zmiany</ButtonAdd>\r\n          </Link>\r\n        ) : (\r\n          <Link to=\"/ApteczkaProject/editMedicine\">\r\n            <ButtonAdd>Zapisz zmiany</ButtonAdd>\r\n          </Link>\r\n        )}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormEdit;\r\n","import React from 'react';\r\nimport AppContext from 'context';\r\nimport FormEdit from 'Components/Form/FormEdit';\r\n\r\nconst EditMedicine = () => (\r\n  <AppContext.Consumer>\r\n    {(context) => (\r\n      <FormEdit\r\n        medicines={context.medicines}\r\n        changeMedicine={context.changeMedicine}\r\n        target={context.target}\r\n      />\r\n    )}\r\n  </AppContext.Consumer>\r\n);\r\n\r\nexport default EditMedicine;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport AppContext from 'context';\nimport GlobalStyle from 'Theme/GlobalStyle';\nimport Medicine from 'Views/Medicine/Medicine';\nimport AddMedicine from 'Views/AddMedicine/AddMedicine';\nimport EditMedicine from 'Views/EditMedicine/EditMedicine';\n\nclass Root extends React.Component {\n  id = 0;\n  state = {\n    target: null,\n    medicines: [],\n  };\n\n  addMedicine = (name, amount, date, remind) => {\n    const medicine = {\n      id: this.id,\n      name,\n      amount,\n      date,\n      remind,\n    };\n    this.id++;\n\n    this.setState((prevState) => ({\n      medicines: [...prevState.medicines, medicine],\n    }));\n  };\n\n  changeMedicine = (name, amount, date, remind) => {\n    const oldMedicines = this.state.medicines;\n    oldMedicines[this.state.target] = {\n      id: this.state.target,\n      name: name,\n      amount: amount,\n      date: date,\n      remind: remind,\n    };\n\n    this.setState({\n      medicines: oldMedicines,\n    });\n  };\n\n  handleClickGetId = (id) => {\n    this.setState({\n      target: id,\n    });\n    return true;\n  };\n\n  render() {\n    const contextElements = {\n      medicines: this.state.medicines,\n      target: this.state.target,\n      addMedicine: this.addMedicine,\n      changeMedicine: this.changeMedicine,\n      handle: this.handleClickGetId,\n    };\n\n    return (\n      <Router>\n        <GlobalStyle />\n        <AppContext.Provider value={contextElements}>\n          <Switch>\n            <Route exact path=\"/ApteczkaProject\" component={Medicine} />\n            <Route path=\"/ApteczkaProject/addMedicine\" component={AddMedicine} />\n            <Route path=\"/ApteczkaProject/editMedicine\" component={EditMedicine} />\n          </Switch>\n        </AppContext.Provider>\n      </Router>\n    );\n  }\n}\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from 'Views/Root/Root';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}