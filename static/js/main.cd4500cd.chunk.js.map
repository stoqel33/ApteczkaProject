{"version":3,"sources":["context.js","Theme/GlobalStyle.js","Components/List/Item/Item.js","Components/List/List.js","Styled/Link.js","Views/Medicine/Medicine.js","Components/Form/Label/Input/Inputs.js","Components/Form/Label/Label.js","Components/Form/Form.js","Views/AddMedicine/AddMedicine.js","Views/Root/Root.js","index.js"],"names":["AppContext","React","createContext","GlobalStyle","createGlobalStyle","Wrapper","styled","div","Title","span","TitleName","Value","Item","name","amount","date","remind","List","medicines","map","medicine","key","id","Link","h1","Empty","ButtonAddNew","button","Medicine","Consumer","context","length","to","Input","input","InputAmount","Inputs","type","checked","placeholder","autoComplete","value","onChange","min","defaultProps","MedicineLabel","label","h2","Label","children","htmlFor","FormAdd","form","WrapperMedicine","ButtonAdd","Form","state","nameMedicine","amountMedicine","dateMedicine","Date","toISOString","slice","remindMedicine","handleInputChange","e","target","setState","replace","handleClickSubmit","nameMed","trim","medicineName","charAt","toUpperCase","props","addMedicine","this","onClick","Component","AddMedicine","Root","prevState","contextElements","Provider","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd4500cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AppContext = React.createContext();\r\n\r\nexport default AppContext;\r\n","import { createGlobalStyle } from 'styled-components/macro';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n  *{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  html{\r\n    font-size: 62.5%;\r\n  }\r\n\r\n  body{\r\n    font-size: 1.6rem;\r\n    font-family: 'Montserrat', sans-serif;\r\n    background: linear-gradient(135deg, rgba(97,13,103,1) 10%, rgba(167,98,98,1) 100%);\r\n    min-height: 100vh;\r\n\r\n    @media screen and (min-width: 800px) {\r\n        max-width: 800px;\r\n        margin: 0 auto;\r\n      }\r\n    }\r\n\r\n  textarea:focus,\r\n  input:focus,\r\n  button:focus {\r\n    outline: none;\r\n  }\r\n\r\n  input[type='number']::-webkit-outer-spin-button,\r\n  input[type='number']::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n  }\r\n\r\n  input[type='number'] {\r\n    -moz-appearance: textfield;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px 40px;\r\n  margin-bottom: 20px;\r\n  background-color: rgba(245, 245, 245, 0.3);\r\n  border-radius: 10%;\r\n\r\n  &:last-child {\r\n    margin-bottom: 30px;\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  font-size: 18px;\r\n  margin-bottom: 7px;\r\n\r\n  &:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n`;\r\n\r\nconst TitleName = styled(Title)`\r\n  font-size: 25px;\r\n`;\r\n\r\nconst Value = styled.span`\r\n  margin-left: 8px;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst Item = ({ name, amount, date, remind }) => (\r\n  <Wrapper>\r\n    <TitleName>\r\n      Lek <Value>{name}</Value>\r\n    </TitleName>\r\n    <Title>\r\n      Ilość <Value>{amount}</Value>\r\n    </Title>\r\n    <Title>\r\n      Data ważności <Value>{date}</Value>\r\n    </Title>\r\n    {remind ? (\r\n      <Title>\r\n        Przypomnienie\r\n        <Value>TAK</Value>\r\n      </Title>\r\n    ) : (\r\n      <Title>\r\n        Przypomnienie\r\n        <Value>NIE</Value>\r\n      </Title>\r\n    )}\r\n  </Wrapper>\r\n);\r\n\r\nItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  amount: PropTypes.string.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n  remind: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Item;\r\n","import React from 'react';\r\nimport Item from 'Components/List/Item/Item';\r\nimport styled from 'styled-components/macro';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding-top: 50px;\r\n`;\r\n\r\nconst List = ({ medicines }) => {\r\n  return (\r\n    <Wrapper>\r\n      {medicines.map((medicine) => (\r\n        <Item\r\n          key={medicine.id}\r\n          name={medicine.name}\r\n          amount={medicine.amount}\r\n          date={medicine.date}\r\n          remind={medicine.remind}\r\n        />\r\n      ))}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import { Link } from 'react-router-dom';\r\nimport styled from 'styled-components/macro';\r\n\r\nexport default styled(Link)`\r\n  text-decoration: none;\r\n  color: inherit;\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport AppContext from 'context';\r\nimport List from 'Components/List/List';\r\nimport Link from 'Styled/Link';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh;\r\n  text-align: center;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin-top: 20px;\r\n  color: white;\r\n`;\r\n\r\nconst Empty = styled.h1`\r\n  margin: 50px 20px;\r\n  padding: 100px 40px;\r\n  background-color: rgba(245, 245, 245, 0.3);\r\n  border-radius: 10%;\r\n  color: black;\r\n`;\r\n\r\nconst ButtonAddNew = styled.button`\r\n  width: 100%;\r\n  margin-bottom: 20px;\r\n  font-size: 35px;\r\n  color: white;\r\n  background-color: transparent;\r\n  border: none;\r\n`;\r\n\r\nconst Medicine = () => (\r\n  <AppContext.Consumer>\r\n    {(context) => (\r\n      <Wrapper>\r\n        <Title css=\"color: red\">Apteczka</Title>\r\n        {context.medicines.length > 0 ? (\r\n          <List medicines={context.medicines} />\r\n        ) : (\r\n          <Empty>Brak leków</Empty>\r\n        )}\r\n        <ButtonAddNew>\r\n          <Link to=\"/ApteczkaProject/addMedicine\">Dodaj nowy lek</Link>\r\n        </ButtonAddNew>\r\n      </Wrapper>\r\n    )}\r\n  </AppContext.Consumer>\r\n);\r\n\r\nexport default Medicine;\r\n","import React from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport Proptypes from 'prop-types';\r\n\r\nconst Input = styled.input`\r\n  color: white;\r\n  padding: 10px 0 10px 15px;\r\n  margin-right: 10px;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-left: 1px solid black;\r\n  border-bottom: 1px solid black;\r\n  ::placeholder {\r\n    font-size: 300;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst InputAmount = styled(Input)`\r\n  width: 50px;\r\n`;\r\n\r\nconst Inputs = ({\r\n  type,\r\n  id,\r\n  checked,\r\n  placeholder,\r\n  autoComplete,\r\n  value,\r\n  onChange,\r\n  min,\r\n}) => {\r\n  return (\r\n    <>\r\n      {(type === 'text' && (\r\n        <Input\r\n          type=\"text\"\r\n          id={id}\r\n          placeholder={placeholder}\r\n          autoComplete={autoComplete}\r\n          value={value}\r\n          onChange={onChange}\r\n        />\r\n      )) ||\r\n        (type === 'number' && (\r\n          <InputAmount\r\n            type=\"tel\"\r\n            id={id}\r\n            placeholder={placeholder}\r\n            value={value}\r\n            onChange={onChange}\r\n            min={min}\r\n          />\r\n        )) ||\r\n        (type === 'date' && (\r\n          <Input\r\n            type=\"date\"\r\n            id={id}\r\n            placeholder={placeholder}\r\n            autoComplete={autoComplete}\r\n            value={value}\r\n            onChange={onChange}\r\n          />\r\n        )) ||\r\n        (type === 'checkbox' && (\r\n          <Input type=\"checkbox\" id={id} checked={checked} onChange={onChange} />\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n\r\nInputs.propTypes = {\r\n  type: Proptypes.string.isRequired,\r\n  id: Proptypes.string.isRequired,\r\n  checked: Proptypes.bool,\r\n  placeholder: Proptypes.string,\r\n  autoComplete: Proptypes.string,\r\n  value: Proptypes.string,\r\n  onChange: Proptypes.func.isRequired,\r\n  min: Proptypes.string,\r\n};\r\n\r\nInputs.defaultProps = {\r\n  checked: false,\r\n  placeholder: '',\r\n  autoComplete: 'on',\r\n  value: '',\r\n  min: '',\r\n};\r\n\r\nexport default Inputs;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components/macro';\r\nimport Inputs from 'Components/Form/Label/Input/Inputs';\r\n\r\nconst MedicineLabel = styled.label`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  @media screen and (min-width: 800px) {\r\n    .medicineLabel {\r\n      margin: 0 80px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  font-size: 20px;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst Label = ({\r\n  name,\r\n  type,\r\n  placeholder,\r\n  value,\r\n  onChange,\r\n  children,\r\n  checked,\r\n  autoComplete,\r\n}) => {\r\n  return (\r\n    <MedicineLabel htmlFor={name}>\r\n      <Title>{children}</Title>\r\n      <Inputs\r\n        type={type}\r\n        id={name}\r\n        checked={checked}\r\n        placeholder={placeholder}\r\n        autoComplete={autoComplete}\r\n        value={value}\r\n        onChange={onChange}\r\n        min=\"1\"\r\n      />\r\n    </MedicineLabel>\r\n  );\r\n};\r\n\r\nLabel.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n  children: PropTypes.string.isRequired,\r\n  checked: PropTypes.bool,\r\n  autoComplete: PropTypes.string,\r\n};\r\n\r\nLabel.defaultProps = {\r\n  placeholder: '',\r\n  value: '',\r\n  checked: false,\r\n  autoComplete: 'on',\r\n};\r\n\r\nexport default Label;\r\n","import React from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport Link from 'Styled/Link';\r\nimport Label from './Label/Label';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 20px 0;\r\n  color: white;\r\n`;\r\n\r\nconst FormAdd = styled.form`\r\n  width: 100%;\r\n`;\r\n\r\nconst WrapperMedicine = styled.div`\r\n  padding: 20px 5px;\r\n  margin: 30px 0;\r\n  background: rgba(245, 245, 245, 0.3);\r\n`;\r\n\r\nconst ButtonAdd = styled.button`\r\n  width: 250px;\r\n  height: 50px;\r\n  margin-top: 20px;\r\n  letter-spacing: 2px;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  color: #a55f62;\r\n  border: 2px solid black;\r\n  background-color: black;\r\n  list-style: none;\r\n  text-decoration: none;\r\n  line-height: 45px;\r\n  text-align: center;\r\n`;\r\n\r\nclass Form extends React.Component {\r\n  state = {\r\n    nameMedicine: '',\r\n    amountMedicine: '',\r\n    dateMedicine: new Date().toISOString().slice(0, 10),\r\n    remindMedicine: false,\r\n  };\r\n\r\n  handleInputChange = (e) => {\r\n    if (e.target.type === 'checkbox') {\r\n      this.setState({\r\n        [e.target.id]: e.target.checked,\r\n      });\r\n    } else if (e.target.type === 'tel') {\r\n      e.target.value = e.target.value.replace(/[^0-9]+/, '');\r\n      if (e.target.value === '0') {\r\n        e.target.value = '';\r\n      } else {\r\n        this.setState({\r\n          [e.target.id]: e.target.value,\r\n        });\r\n      }\r\n    } else if (e.target.type === 'text') {\r\n      e.target.value = e.target.value.replace(/[^a-zA-Z]+/, '');\r\n      this.setState({\r\n        [e.target.id]: e.target.value,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        [e.target.id]: e.target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleClickSubmit = () => {\r\n    const { nameMedicine, amountMedicine, dateMedicine, remindMedicine } = this.state;\r\n    const nameMed = nameMedicine.trim();\r\n    const medicineName = nameMed.charAt(0).toUpperCase() + nameMed.slice(1).trim();\r\n    const newMedicine = this.props.addMedicine(\r\n      medicineName,\r\n      amountMedicine,\r\n      dateMedicine,\r\n      remindMedicine,\r\n    );\r\n    if (newMedicine) {\r\n      this.setState({\r\n        nameMedicine: '',\r\n        amountMedicine: '',\r\n        dateMedicine: new Date().toISOString().slice(0, 10),\r\n        remindMedicine: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Title>Dodaj Lek</Title>\r\n        <FormAdd>\r\n          <WrapperMedicine>\r\n            <Label\r\n              name=\"nameMedicine\"\r\n              type=\"text\"\r\n              autoComplete=\"off\"\r\n              value={this.state.nameMedicine}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Nazwa\"\r\n            >\r\n              Nazwa leku\r\n            </Label>\r\n          </WrapperMedicine>\r\n\r\n          <WrapperMedicine>\r\n            <Label\r\n              name=\"amountMedicine\"\r\n              type=\"number\"\r\n              placeholder=\"0\"\r\n              value={this.state.amountMedicine}\r\n              onChange={this.handleInputChange}\r\n            >\r\n              Ilość Tabletek\r\n            </Label>\r\n          </WrapperMedicine>\r\n\r\n          <WrapperMedicine>\r\n            <Label\r\n              name=\"dateMedicine\"\r\n              type=\"date\"\r\n              value={this.state.dateMedicine}\r\n              onChange={this.handleInputChange}\r\n            >\r\n              Data ważności\r\n            </Label>\r\n          </WrapperMedicine>\r\n\r\n          <WrapperMedicine>\r\n            <Label\r\n              name=\"remindMedicine\"\r\n              type=\"checkbox\"\r\n              checked={this.state.remindMedicine}\r\n              onChange={this.handleInputChange}\r\n            >\r\n              Przypomnienia\r\n            </Label>\r\n          </WrapperMedicine>\r\n        </FormAdd>\r\n\r\n        {this.state.nameMedicine.trim().length > 2 &&\r\n        this.state.amountMedicine.length > 0 ? (\r\n          <Link to=\"/ApteczkaProject/\" onClick={this.handleClickSubmit}>\r\n            <ButtonAdd>DODAJ</ButtonAdd>\r\n          </Link>\r\n        ) : (\r\n          <Link to=\"/ApteczkaProject/AddMedicine\">\r\n            <ButtonAdd>DODAJ</ButtonAdd>\r\n          </Link>\r\n        )}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport AppContext from 'context';\r\nimport Form from 'Components/Form/Form';\r\n\r\nconst AddMedicine = () => (\r\n  <AppContext.Consumer>\r\n    {(context) => <Form addMedicine={context.addMedicine} />}\r\n  </AppContext.Consumer>\r\n);\r\n\r\nexport default AddMedicine;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport AppContext from 'context';\nimport GlobalStyle from 'Theme/GlobalStyle';\nimport Medicine from 'Views/Medicine/Medicine';\nimport AddMedicine from 'Views/AddMedicine/AddMedicine';\n\nclass Root extends React.Component {\n  id = 0;\n  state = {\n    medicines: [],\n  };\n\n  addMedicine = (name, amount, date, remind) => {\n    const medicine = {\n      id: this.id,\n      name,\n      amount,\n      date,\n      remind,\n    };\n    this.id++;\n\n    this.setState((prevState) => ({\n      medicines: [...prevState.medicines, medicine],\n    }));\n    return true;\n  };\n\n  render() {\n    const contextElements = {\n      medicines: this.state.medicines,\n      addMedicine: this.addMedicine,\n    };\n\n    return (\n      <Router>\n        <GlobalStyle />\n        <AppContext.Provider value={contextElements}>\n          <Switch>\n            <Route exact path=\"/ApteczkaProject\" component={Medicine} />\n            <Route path=\"/ApteczkaProject/addMedicine\" component={AddMedicine} />\n          </Switch>\n        </AppContext.Provider>\n      </Router>\n    );\n  }\n}\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from 'Views/Root/Root';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}